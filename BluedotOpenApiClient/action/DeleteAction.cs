using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;
using System.Net;
using System.Web.Script.Serialization;
using System.IO;
using System.Security.Cryptography.X509Certificates;

/**
* @author Bluedot Innovation
* Copyright (c) 2016 Bluedot Innovation. All rights reserved.
* Delete Action client demonstrates deleting an action using the id provided, through http web api library
*/

namespace BluedotPublicApiClient.actionclient
{
    class DeleteAction
    {
        public void delete() 
        {
            String bdCustomerApiKey     = "835d9460-7b91-11e4-bcb7-a0481cdc3311"; //This key is generated by Bluedot Access UI when you register
            String bdApplicationApiKey  = "e9224a1b-7f10-4033-82f7-c4d1dfc91825"; //This apiKey is generated when you create an application
            String bdZoneId             = "3846fa1d-11f7-4044-8eab-0977f90d987e"; //This is the ID of the zone being updated.
            String actionId             = "fe6c357a-5273-4f95-8980-2e37ef2dc115"; //This is the ID of the action being deleted.
            String bdRestBaseUrl        = "https://api.bluedotinnovation.com/1/actions?";

            String bdRestUrl        = bdRestBaseUrl + "customerApiKey=" + bdCustomerApiKey + "&apiKey" + bdApplicationApiKey + "&zoneId=" + bdZoneId+ "&actionId=" + actionId;

            WebRequestHandler handler = new WebRequestHandler();
            X509Certificate2 certificate = new X509Certificate2();
            handler.ClientCertificates.Add(certificate);
            HttpClient httpRestClient = new HttpClient(handler);

            //specify to use TLS 1.2 as default connection
            System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;

            HttpResponseMessage serverResponse = httpRestClient.DeleteAsync(new Uri(bdRestUrl)).Result;
            if (serverResponse.IsSuccessStatusCode)
            {
                var result = serverResponse.Content.ReadAsStringAsync().Result;
                Console.WriteLine("{0}", result);
            }
            else
            {
                Console.WriteLine("{0} ({1})", (int)serverResponse.StatusCode, serverResponse.Content.ReadAsStringAsync().Result);
            }
        }

    }
}
