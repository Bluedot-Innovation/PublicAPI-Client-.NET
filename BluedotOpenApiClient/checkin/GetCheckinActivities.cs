using System;
using System.Text;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;
using System.Net;
using System.Web.Script.Serialization;
using System.IO;


/**
 * @author Bluedot Innovation
 * CheckInActivity client demonstrates fetching checkIn activities for a given zone using http web api and JSON.NET libraries
 * 100 CheckIn activities are returned per call, increment the pagenumber parameter to get records corresponding to the page
 * This api also accepts a date range as paramter(optional) where recordds within the start date and the end date range are returned
 */

namespace BluedotPublicApiClient.checkinactivityclient
{
    public class GetCheckinActivities
    {
        private static String bdCustomerApiKey    = "bc199c80-5441-11e4-b7bb-a0481cdc3311"; //This key is generated by Bluedot Access UI when you register
        private static String bdZoneId            = "24d9a245-2087-421b-9972-2af2ee0970f1"; //This is the id of the zone being updated. This can be fetched by calling zones/getAll API
        private static String startDate           = "11/9/2014";
        private static String endDate             = "14/9/2014";
        private static String bdRestBaseUrl       = "https://api.bluedotinnovation.com/1/checkinactivities/get";

        public void getCheckInActivitiesByZoneAndDateRange()
        {
            String bdRestUrl          = bdRestBaseUrl + "?simpleCheckInZoneId=" + bdZoneId + "&customerApiKey=" + bdCustomerApiKey + "&startdate=" + startDate + "&enddate=" + endDate + "&pagenumber=0";
            HttpClient httpRestClient = new HttpClient();

            HttpResponseMessage serverResponse = httpRestClient.GetAsync(new Uri(bdRestUrl)).Result;
            if (serverResponse.IsSuccessStatusCode)
            {
                var result = serverResponse.Content.ReadAsStringAsync().Result;

                JavaScriptSerializer serializer = new JavaScriptSerializer();
                dynamic checkInRecords          = serializer.Deserialize(result, typeof(object)); // Result is an array of json
                foreach (var checkInRecord in checkInRecords)
                {
                    Console.WriteLine("_id : {0} ", checkInRecord["_id"]);
                    Console.WriteLine("creationTime : {0} ", checkInRecord["creationTime"]);
                    Console.WriteLine("zoneId : {0} ", checkInRecord["notification"]["d"]["zoneId"]);
                    Console.WriteLine("zoneName : {0} ", checkInRecord["notification"]["d"]["zoneName"]);
                    Console.WriteLine("speed : {0} ", checkInRecord["notification"]["d"]["speed"]);
                    Console.WriteLine("deviceType : {0} ", checkInRecord["notification"]["d"]["deviceType"]);
                    Console.WriteLine("bluedotId : {0} ", checkInRecord["notification"]["d"]["bluedotId"]); // This is a fully randomised id and the real application id or device id is never stored in the db
                    Console.WriteLine("---------\n");
                }                
            }
            else
            {
                Console.WriteLine("{0} ({1})", (int)serverResponse.StatusCode, serverResponse.Content.ReadAsStringAsync().Result);
            }
        }

        public void getAllCheckInActivitesByZone()
        {
            String bdRestUrl          = bdRestBaseUrl + "?simpleCheckInZoneId=" + bdZoneId + "&customerApiKey=" + bdCustomerApiKey + "&pagenumber=0";

            HttpClient httpRestClient = new HttpClient();

            HttpResponseMessage serverResponse = httpRestClient.GetAsync(new Uri(bdRestUrl)).Result;
            if (serverResponse.IsSuccessStatusCode)
            {
                var result = serverResponse.Content.ReadAsStringAsync().Result;

                JavaScriptSerializer serializer = new JavaScriptSerializer();
                dynamic checkInRecords          = serializer.Deserialize(result, typeof(object));   // Result is an array of json
                foreach (var checkInRecord in checkInRecords)
                {
                    Console.WriteLine("_id : {0} ", checkInRecord["_id"]);
                    Console.WriteLine("creationTime : {0} ", checkInRecord["creationTime"]);
                    Console.WriteLine("zoneId : {0} ", checkInRecord["notification"]["d"]["zoneId"]);
                    Console.WriteLine("zoneName : {0} ", checkInRecord["notification"]["d"]["zoneName"]);
                    Console.WriteLine("speed : {0} ", checkInRecord["notification"]["d"]["speed"]);
                    Console.WriteLine("deviceType : {0} ", checkInRecord["notification"]["d"]["deviceType"]);
                    Console.WriteLine("bluedotId : {0} ", checkInRecord["notification"]["d"]["bluedotId"]); // This is a fully randomised id and the real application id or device id is never stored in the db
                    Console.WriteLine("---------\n");
                }                                
            }
            else
            {
                Console.WriteLine("{0} ({1})", (int)serverResponse.StatusCode, serverResponse.Content.ReadAsStringAsync().Result);
            }
        }
    }
}
