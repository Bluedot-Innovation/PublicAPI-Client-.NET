using System;
using System.Text;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;
using System.Net;
using System.Web.Script.Serialization;
using System.IO;
using System.Security.Cryptography.X509Certificates;

/**
 * @author Bluedot Innovation
 * Copyright (c) 2016 Bluedot Innovation. All rights reserved.
 * CheckInActivity client demonstrates fetching checkIn activities for a given zone using http web api and JSON.NET libraries
 * 100 CheckIn activities are returned per call, increment the pagenumber parameter to get records corresponding to the page
 * This api also accepts a date range as paramter(optional) where recordds within the start date and the end date range are returned
 */

namespace BluedotPublicApiClient.checkinactivityclient
{
    public class GetCheckinActivities
    {
        private static String bdCustomerApiKey    = "bc199c80-5441-11e4-b7bb-a0481cdc3311"; //This key is generated by Bluedot Access UI when you register
        private static String bdApplicationApiKey = "dc99ae20-9192-11e5-8721-0646bf53d23f"; //This apiKey is generated when you create an application
        private static String bdZoneId            = "24d9a245-2087-421b-9972-2af2ee0970f1"; //This is the id of the zone being updated. This can be fetched by calling GET zones API
        private static String startDate           = "11/9/2015";
        private static String endDate             = "14/9/2015";
        private static String bdRestBaseUrl       = "https://api.bluedotinnovation.com/2/checkinactivities?";

        public void getCheckInActivitiesByZoneAndDateRange()
        {
            String bdRestUrl          = bdRestBaseUrl + "simpleCheckInZoneId=" + bdZoneId + "&customerApiKey=" + bdCustomerApiKey + "&apiKey="+ bdApplicationApiKey + "&startdate=" + startDate + "&enddate=" + endDate + "&pagenumber=0";

            WebRequestHandler handler = new WebRequestHandler();
            X509Certificate2 certificate = new X509Certificate2();
            handler.ClientCertificates.Add(certificate);
            HttpClient httpRestClient = new HttpClient(handler);

            //specify to use TLS 1.2 as default connection
            System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;

            HttpResponseMessage serverResponse = httpRestClient.GetAsync(new Uri(bdRestUrl)).Result;
            if (serverResponse.IsSuccessStatusCode)
            {
                var result = serverResponse.Content.ReadAsStringAsync().Result;

                JavaScriptSerializer serializer = new JavaScriptSerializer();
                dynamic checkInRecords          = serializer.Deserialize(result, typeof(object)); // Result is an array of json
                foreach (var checkInRecord in checkInRecords)
                {
                    Console.WriteLine("Check-in ID : {0} ", checkInRecord["checkInId"]);
                    Console.WriteLine("Check-in Time : {0} ", checkInRecord["checkInTime"]);
                    Console.WriteLine("Zone ID : {0} ", checkInRecord["zoneId"]);
                    Console.WriteLine("Zone Name : {0} ", checkInRecord["zoneName"]);
                    Console.WriteLine("Device Speed : {0} ", checkInRecord["deviceSpeed"]);
                    Console.WriteLine("Device Type : {0} ", checkInRecord["deviceType"]);
                    Console.WriteLine("Installation Ref : {0} ", checkInRecord["installRef"]); // This is a fully randomised id and the real application id or device id is never stored in the db
                    Console.WriteLine("---------\n");
                }                
            }
            else
            {
                Console.WriteLine("{0} ({1})", (int)serverResponse.StatusCode, serverResponse.Content.ReadAsStringAsync().Result);
            }
        }

        public void getAllCheckInActivitesByZone()
        {
            String bdRestUrl          = bdRestBaseUrl + "simpleCheckInZoneId=" + bdZoneId + "&customerApiKey=" + bdCustomerApiKey + "&apiKey="+ bdApplicationApiKey +"&pagenumber=0";

            WebRequestHandler handler = new WebRequestHandler();
            X509Certificate2 certificate = new X509Certificate2();
            handler.ClientCertificates.Add(certificate);
            HttpClient httpRestClient = new HttpClient(handler);

            //specify to use TLS 1.2 as default connection
            System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;

            HttpResponseMessage serverResponse = httpRestClient.GetAsync(new Uri(bdRestUrl)).Result;
            if (serverResponse.IsSuccessStatusCode)
            {
                var result = serverResponse.Content.ReadAsStringAsync().Result;

                JavaScriptSerializer serializer = new JavaScriptSerializer();
                dynamic checkInRecords          = serializer.Deserialize(result, typeof(object));   // Result is an array of json
                foreach (var checkInRecord in checkInRecords)
                {
                    Console.WriteLine("Check-in ID : {0} ", checkInRecord["checkInId"]);
                    Console.WriteLine("Check-in Time : {0} ", checkInRecord["checkInTime"]);
                    Console.WriteLine("Zone ID : {0} ", checkInRecord["zoneId"]);
                    Console.WriteLine("Zone Name : {0} ", checkInRecord["zoneName"]);
                    Console.WriteLine("Device Speed : {0} ", checkInRecord["deviceSpeed"]);
                    Console.WriteLine("Device Type : {0} ", checkInRecord["deviceType"]);
                    Console.WriteLine("Installation Ref : {0} ", checkInRecord["installRef"]); // This is a fully randomised id and the real application id or device id is never stored in the db
                    Console.WriteLine("---------\n");
                }                                
            }
            else
            {
                Console.WriteLine("{0} ({1})", (int)serverResponse.StatusCode, serverResponse.Content.ReadAsStringAsync().Result);
            }
        }
    }
}
