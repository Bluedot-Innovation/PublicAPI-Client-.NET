using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;
using System.Net;
using System.Web.Script.Serialization;
using System.IO;
using System.Security.Cryptography.X509Certificates;

/**
* @author Bluedot Innovation
* Copyright (c) 2016 Bluedot Innovation. All rights reserved.
* Delete Application client demonstrates deleting an application using the application id provided, through http web api library
*/
namespace BluedotPublicApiClient.applicationclient
{
    class DeleteApplication
    {
        public void delete()
        {
            String bdCustomerApiKey = "835d9460-7b91-11e4-bcb7-a0481cdc3311"; //This key is generated by Bluedot Point Access UI when your account is created
            String bdApplicationId  = "d66d4f5d-7c09-4bd1-8549-48893f121"; //This ID of the application being deleted and can be retrieved through the GET Applications call
            String bdRestBaseUrl    = "https://api.bluedotinnovation.com/1/applications?";

            String bdRestUrl = bdRestBaseUrl + "customerApiKey=" + bdCustomerApiKey + "&applicationId=" + bdApplicationId;
            
            WebRequestHandler handler = new WebRequestHandler();
            X509Certificate2 certificate = new X509Certificate2();
            handler.ClientCertificates.Add(certificate);
            HttpClient httpRestClient = new HttpClient(handler);

            //specify to use TLS 1.2 as default connection
            System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;

            HttpResponseMessage serverResponse = httpRestClient.DeleteAsync(new Uri(bdRestUrl)).Result;
            if (serverResponse.IsSuccessStatusCode)
            {
                var result = serverResponse.Content.ReadAsStringAsync().Result;
                Console.WriteLine("{0}", result);
            }
            else
            {
                Console.WriteLine("{0} ({1})", (int)serverResponse.StatusCode, serverResponse.Content.ReadAsStringAsync().Result);
            }
        }
    }
}
