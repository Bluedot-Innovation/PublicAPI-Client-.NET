using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;
using System.Net;
using System.Web.Script.Serialization;
using System.IO;
using System.Security.Cryptography.X509Certificates;

/**
 * @author Bluedot Innovation
 * Copyright (c) 2016 Bluedot Innovation. All rights reserved.
 * Delete Beacon client demonstrates deleting a beacon using .Net http web api library
 * If a beacon is added to the zone then it will not be deleted and an error response will be returned. 
 * A beacon can only be deleted if it is not added to any zone, in any of the applications of the user's account.
 */

namespace BluedotPublicApiClient.beaconclient
{
    class DeleteBeacon
    {
        private static String bdCustomerApiKey = "dc67d0e0-397b-11e5-9931-0646bf53d23f"; //This key is generated by Bluedot Point Access UI when your account is created
        private static String bdBeaconId       = "b7db6f18-6557-4903-b0a7-b35b96d54fec"; //Beacon ID generated when creating new beacons.
        private static String bdRestUrl        = "https://api.bluedotinnovation.com/1/beacons?";

        public void delete()
        {
            bdRestUrl = bdRestUrl + "customerApiKey=" + bdCustomerApiKey + "&beaconId=" + bdBeaconId;

            WebRequestHandler handler = new WebRequestHandler();
            X509Certificate2 certificate = new X509Certificate2();
            handler.ClientCertificates.Add(certificate);
            HttpClient httpRestClient = new HttpClient(handler);

            //specify to use TLS 1.2 as default connection
            System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;

            HttpResponseMessage serverResponse = httpRestClient.DeleteAsync(new Uri(bdRestUrl)).Result;
            if (serverResponse.IsSuccessStatusCode)
            {
                var result = serverResponse.Content.ReadAsStringAsync().Result;
                Console.WriteLine("{0}", result);
            }
            else
            {
                Console.WriteLine("{0} ({1})", (int)serverResponse.StatusCode, serverResponse.Content.ReadAsStringAsync().Result);
            }
        }
    }
}
