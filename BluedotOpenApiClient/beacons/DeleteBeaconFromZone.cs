using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;
using System.Net;
using System.Web.Script.Serialization;
using System.IO;
using System.Security.Cryptography.X509Certificates;

/**
 * @author Bluedot Innovation
 * Copyright (c) 2016 Bluedot Innovation. All rights reserved.
 * Delete Beacon from Zone client demonstrates dissociating a beacon added to an existing zone using .Net http web api library.
 */

namespace BluedotPublicApiClient.beaconclient
{
    class DeleteBeaconFromZone
    {
        private static String bdCustomerApiKey      = "b2a9e860-2890-11e6-8148-0639e7649356"; //This key is generated by Bluedot Access UI when you register
        private static String bdApplicationApiKey   = "38655d80-3774-11e6-9cb1-0639e7649356"; //This apiKey is generated when you create an application
        private static String bdZoneId              = "083ec47c-7785-45dd-8c59-eb7eef96acd7"; //This is the ID of the zone being updated.
        private static String bdBeaconId            = "09d04533-d421-449b-9fc1-84c89b3a34d1"; //Beacon ID generated when creating new beacons
        private static String bdRestUrl             = "https://api.bluedotinnovation.com/1/zones/beacons?";

        public void delete()
        {
            bdRestUrl = bdRestUrl + "customerApiKey=" + bdCustomerApiKey + "&apiKey=" + bdApplicationApiKey + 
                "&zoneId=" + bdZoneId + "&beaconId=" + bdBeaconId;

            WebRequestHandler handler = new WebRequestHandler();
            X509Certificate2 certificate = new X509Certificate2();
            handler.ClientCertificates.Add(certificate);
            HttpClient httpRestClient = new HttpClient(handler);

            //specify to use TLS 1.2 as default connection
            System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;

            HttpResponseMessage serverResponse = httpRestClient.DeleteAsync(new Uri(bdRestUrl)).Result;
            if (serverResponse.IsSuccessStatusCode)
            {
                var result = serverResponse.Content.ReadAsStringAsync().Result;
                Console.WriteLine("{0}", result);
            }
            else
            {
                Console.WriteLine("{0} ({1})", (int)serverResponse.StatusCode, serverResponse.Content.ReadAsStringAsync().Result);
            }
        }
    }
}
