using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;
using System.Net;
using System.IO;
using System.Threading.Tasks;

namespace BluedotPublicApiClient.zoneclient
{
    public class FenceBulkLoader
    {
        private static String bdCustomerApiKey    = "bc199c80-5441-11e4-b7bb-a0481cdc3311"; //This key is generated by Bluedot Access UI when you register
        private static String bdApplicationApiKey = "d3161e80-38d1-11e4-b039-bc305bf60831"; //This apiKey is generated when you create an application
        private static String bdRestUrl           = "https://api.bluedotinnovation.com/1/fences";
        private static String bdZoneId            = "24d9a245-2087-421b-9972-2af2ee0970f1"; //This is the id of the zone being updated. This can be fetched by calling zones/getAll API

        System.IO.StreamReader file = new System.IO.StreamReader("C:\\tmp\\Downloads\\testdata\\curateddata.csv");
        public void loadFences()
        {
            int requestCount = 0;
            string line;
            while ((line = file.ReadLine()) != null)
            {
                try
                {
                    Console.WriteLine(line);
                    string[] elements = line.Split(',');

                    HttpClient httpRestClient = new HttpClient();
                    httpRestClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                    HttpContent jsonFenceContent = new StringContent(getJsonCircularFence(elements[0], elements[1], "15", elements[2]));
                    jsonFenceContent.Headers.ContentType = new MediaTypeHeaderValue("application/json");

                    HttpResponseMessage serverResponse = httpRestClient.PostAsync(new Uri(bdRestUrl), jsonFenceContent).Result;
                    if (serverResponse.IsSuccessStatusCode)
                    {
                        var dataObjects = serverResponse.Content.ReadAsStringAsync().Result;
                        foreach (var d in dataObjects)
                        {
                            Console.WriteLine("{0}", d);
                        }
                    }
                    else
                    {
                        Console.WriteLine("{0} ({1})", (int)serverResponse.StatusCode, serverResponse.Content.ReadAsStringAsync().Result);
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine("Exception occured: " + ex.ToString());
                }
                requestCount++;
            }

            file.Close();

            
        }

        private static String getJsonCircularFence(String lat, String lon, String radius, String fenceName)
        {
            String circularFenceJson =
            "{" +
               "\"security\": {" +
                "\"apiKey\":" + "\"" + bdApplicationApiKey + "\"," +
                "\"customerApiKey\":" + "\"" + bdCustomerApiKey + "\" " +
            "}," +
            "\"content\": {" +
                "\"zone\": {" +
                    "\"zoneId\":" + "\"" + bdZoneId + "\"," +
                    "\"fences\": {" +
                        "\"circles\": [" +
                            "{" +
                                "\"name\":" + "\"" + fenceName + "\"," +
                                "\"color\": \"#000ffff\"," +
                                "\"radius\":" + "\"" + radius + "\"," +
                                "\"center\": {" +
                                    "\"latitude\":" + "\"" + lat + "\"," +
                                    "\"longitude\":" + "\"" + lon + "\" " +
                                "}" +
                            "}" +
                        "]" +
                    "}" +
                "}" +
            "}" +
         "}";
         return circularFenceJson;
        }
    }
}
